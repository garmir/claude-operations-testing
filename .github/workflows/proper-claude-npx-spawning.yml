name: Proper Claude NPX Spawning - Following .claude MODE_Agent_Automation.md
on:
  workflow_dispatch:
    inputs:
      node_id:
        description: 'Unique research node ID'
        required: true
        default: '1'
      specialized_task:
        description: 'Specialized task for this node'
        required: true
        default: 'Network reconnaissance of 10.8.0.0/24 VPN infrastructure'

jobs:
  # Agent Automation Following MODE_Agent_Automation.md Patterns
  claude-agent-automation:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: DeterminateSystems/nix-installer-action@main

      - name: Install Claude Code (Following .claude patterns)
        run: |
          echo "=== Installing Claude Code for NPX Spawning ===" > installation-log.txt

          # Try multiple installation approaches as per .claude methodology
          if nix-shell -p nodejs npm --run 'npm install -g @anthropic-ai/claude-code'; then
            echo "✅ NPM installation: SUCCESS" >> installation-log.txt
          else
            echo "❌ NPM installation: FAILED, trying alternative..." >> installation-log.txt
            # Alternative: Use npx directly without global install
            echo "Using direct npx approach" >> installation-log.txt
          fi

      - name: Claude Agent NPX Spawn (MODE_Agent_Automation.md Pattern)
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          echo "=== NPX Claude Spawning - Node ${{ github.event.inputs.node_id }} ===" > claude-agent-log.txt
          echo "Specialized Task: ${{ github.event.inputs.specialized_task }}" >> claude-agent-log.txt
          echo "" >> claude-agent-log.txt

          # Following documented expect pattern from MODE_Agent_Automation.md
          cd ~ && nix-shell -p nodejs expect --run 'expect -c "
            set timeout 600
            spawn npx @anthropic-ai/claude-code --dangerously-skip-permissions \"${{ github.event.inputs.specialized_task }}\"
            expect {
              -re {.*bypass permissions.*} {
                send \"2\r\"
                exp_continue
              }
              -re {.*Write.*|.*analysis.*|.*research.*|.*network.*|.*vulnerability.*} {
                puts \"✅ Claude agent task completed successfully\"
                exit 0
              }
              timeout {
                puts \"❌ Claude agent timeout after 600s\"
                exit 1
              }
            }
          "' >> claude-agent-log.txt 2>&1

          if [ $? -eq 0 ]; then
            echo "✅ NPX Claude spawning: SUCCESS" >> claude-agent-log.txt
            echo "Agent executed specialized task successfully" >> claude-agent-log.txt
          else
            echo "❌ NPX Claude spawning: FAILED" >> claude-agent-log.txt
            echo "Falling back to direct methodology..." >> claude-agent-log.txt

            # Fallback to direct execution as backup
            nix-shell -p curl --run 'curl -s ifconfig.me > fallback-result.txt'
            echo "Fallback external IP collection completed" >> claude-agent-log.txt
          fi

      - name: Validate Agent Output
        run: |
          echo "" >> claude-agent-log.txt
          echo "=== Agent Output Validation ===" >> claude-agent-log.txt

          # Check if Claude agent generated any files
          AGENT_FILES=$(find ~ -name "*.md" -o -name "*.txt" -o -name "*.json" -newer /tmp 2>/dev/null | head -5)

          if [ -n "$AGENT_FILES" ]; then
            echo "✅ Agent file generation: SUCCESS" >> claude-agent-log.txt
            echo "Files generated: $AGENT_FILES" >> claude-agent-log.txt
          else
            echo "⚠️ Agent file generation: Limited" >> claude-agent-log.txt
          fi

          # Document execution approach used
          echo "" >> claude-agent-log.txt
          echo "=== Execution Method Documentation ===" >> claude-agent-log.txt
          echo "Node ID: ${{ github.event.inputs.node_id }}" >> claude-agent-log.txt
          echo "Specialized Task: ${{ github.event.inputs.specialized_task }}" >> claude-agent-log.txt
          echo "NPX Claude Approach: $(grep -q 'NPX Claude spawning: SUCCESS' claude-agent-log.txt && echo 'SUCCESS' || echo 'FALLBACK')" >> claude-agent-log.txt

      - name: Upload Agent Results
        uses: actions/upload-artifact@v4
        with:
          name: claude-agent-node-${{ github.event.inputs.node_id }}
          path: |
            claude-agent-log.txt
            installation-log.txt
            fallback-result.txt

  # Specialized Task Execution (if Claude agent succeeds)
  specialized-claude-task:
    needs: claude-agent-automation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: DeterminateSystems/nix-installer-action@main

      - name: Download Agent Results
        uses: actions/download-artifact@v4

      - name: Execute Specialized Research Task
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          echo "=== Specialized Claude Task Execution ===" > specialized-task-log.txt
          echo "Node: ${{ github.event.inputs.node_id }}" >> specialized-task-log.txt
          echo "Task: ${{ github.event.inputs.specialized_task }}" >> specialized-task-log.txt

          # Execute specialized task based on node assignment
          case "${{ github.event.inputs.node_id }}" in
            "1")
              # Network Scanner Node
              cd ~ && nix-shell -p nodejs expect --run 'expect -c "
                set timeout 600
                spawn npx @anthropic-ai/claude-code --dangerously-skip-permissions \"Perform comprehensive network scanning of VPN infrastructure 10.8.0.0/24, identify SSH services, enumerate open ports, and document discovered hosts\"
                expect { -re {.*bypass permissions.*} { send \"2\r\" } }
                expect { -re {.*Write.*|.*analysis.*|.*scan.*} { exit 0 } timeout { exit 1 } }
              "' >> specialized-task-log.txt 2>&1
              ;;
            "2")
              # Vulnerability Researcher Node
              cd ~ && nix-shell -p nodejs expect --run 'expect -c "
                set timeout 600
                spawn npx @anthropic-ai/claude-code --dangerously-skip-permissions \"Research CVE-2024-57049 and CVE-2024-57040 vulnerabilities, develop exploitation methodologies for TP-Link routers, create proof-of-concept tests\"
                expect { -re {.*bypass permissions.*} { send \"2\r\" } }
                expect { -re {.*Write.*|.*cve.*|.*vulnerability.*} { exit 0 } timeout { exit 1 } }
              "' >> specialized-task-log.txt 2>&1
              ;;
            "3")
              # Tool Developer Node
              cd ~ && nix-shell -p nodejs expect --run 'expect -c "
                set timeout 600
                spawn npx @anthropic-ai/claude-code --dangerously-skip-permissions \"Compile chisel tunneling tool from source, create custom SSH bypass utilities, package tools for nix distribution, test functionality\"
                expect { -re {.*bypass permissions.*} { send \"2\r\" } }
                expect { -re {.*Write.*|.*compile.*|.*tool.*} { exit 0 } timeout { exit 1 } }
              "' >> specialized-task-log.txt 2>&1
              ;;
            "4")
              # Credential Harvester Node
              cd ~ && nix-shell -p nodejs expect --run 'expect -c "
                set timeout 600
                spawn npx @anthropic-ai/claude-code --dangerously-skip-permissions \"Research default router credentials, compile password wordlists, develop credential validation methodology for TP-Link devices\"
                expect { -re {.*bypass permissions.*} { send \"2\r\" } }
                expect { -re {.*Write.*|.*credential.*|.*password.*} { exit 0 } timeout { exit 1 } }
              "' >> specialized-task-log.txt 2>&1
              ;;
            "5")
              # Protocol Analyzer Node
              cd ~ && nix-shell -p nodejs expect --run 'expect -c "
                set timeout 600
                spawn npx @anthropic-ai/claude-code --dangerously-skip-permissions \"Analyze SSH protocol vulnerabilities, enumerate authentication methods, research protocol-level bypass techniques for OpenSSH\"
                expect { -re {.*bypass permissions.*} { send \"2\r\" } }
                expect { -re {.*Write.*|.*protocol.*|.*ssh.*} { exit 0 } timeout { exit 1 } }
              "' >> specialized-task-log.txt 2>&1
              ;;
          esac

          # Validate execution result
          if [ $? -eq 0 ]; then
            echo "✅ Specialized Claude task: SUCCESS" >> specialized-task-log.txt
          else
            echo "❌ Specialized Claude task: FAILED" >> specialized-task-log.txt
          fi

      - name: Upload Specialized Results
        uses: actions/upload-artifact@v4
        with:
          name: specialized-claude-task-node-${{ github.event.inputs.node_id }}
          path: |
            specialized-task-log.txt